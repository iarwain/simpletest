; Simple test - config file
; Should be used with orx v.1.5+


; --- Config includes ---

; Including the spritesheet config data that was generated by the awesome TexturePacker, courtesy of Andreas LÃ¶w,
; from the non-less awesome art made by danc of www.lostgarden.com.
@spritesheet.ini@

; Overriding some pivot of "sprites" defined in spritesheet.ini
[Tree Short]
Pivot           = center

[Chest]
Pivot           = center

[Gem Blue]
Pivot           = center


; --- Viewports and cameras ---

[Viewport]
Camera          = Camera

[Camera]
FrustumWidth    = 1280
FrustumHeight   = 800
FrustumFar      = 2
Position        = (0, 0, -1)


; --- Objects ---

; Scene is one of the only two objects referenced in code, the other one being Random.
; No direct interaction is made in code with it either: the code simply creates it and forgets about it.
; The only interaction made in code will be creating a Random  object under the mouse cursor when the input "Action" is activated.
[Scene]
ChildList       = Background #                            ; Background surface (a mere pretext for having a shader in background).
                  Music                                   ; Music object, serves as a simple container for a music stream.


[Background]
Graphic         = @                                       ; @ is a special identifier that is replaced by the name of the current section. Kinda similar to a "self" keyword.
Texture         = @spritesheet                            ; Using the full texture generated by TexturePacke, defined in spritesheet.ini.
Pivot           = center                                  ; Centering the graphic's pivot (aka. hotspot).
ParentCamera    = Camera                                  ; Setting the camera as parent.
Scale           = 1                                       ; Scaling the object to match the parent's dimensions (here, the Camera).
Position        = (0, 0, 1)                               ; Pushing the object in the background (on the far plane of the Camera frustum).
Color           = (100, 100, 164)                         ; Teint to apply on the object.
; Here's a simple shader using polar coordinates to display textured wormhole.
ShaderList      = @
Code            = "
void main()
{
  float a, r;
  vec2  vUV, vPos;
  vec4  vPixel;

  vPos          = -1.0 + 2.0 * gl_TexCoord[0].xy;

  r             = sqrt(dot(vPos, vPos));
  a             = atan(vPos.y, vPos.x) + 0.75 * sin(1.5 * r - 0.5 * fTime);

  vUV.x         = mod(fTime + 1.0/r, 1.0);
  vUV.y         = mod(3.0 * a / 3.1416, 1.0);

  vPixel        = texture2D(Texture, vUV);

  gl_FragColor  = vec4(vPixel.rgb * vec3(r * r * r), vPixel.a);
}
"
ParamList       = Texture # fTime;                        ; List of external parameters sent to the shader, as we don't define "Texture" below, the object's own texture will be used.
fTime           = time                                    ; "time" is a keyword recognized by orx: the parameter value will be the object's "age", in seconds.

[Explosion]
Spawner         = @
WaveSize        = 10
WaveDelay       = 0.01
Position        = (25, 45, 0)
TotalObject     = 25
Object          = Particle

[Particle]
Graphic         = Tree Short
AngularVelocity = -90 ~ 90
Position        = (-15, -15, 0) ~ (15, 15, 0)
Scale           = 0.1
LifeTime        = 0.8
FXList          = @
SlotList        = ParticleShrinkFX

[Chest]
Graphic         = Chest
Position        = (-350, -150, 0.5)

[Gem]
Graphic         = Gem Blue
Position        = (-45, -150, 0.5)
; Here's another simple shader using polar coordinates to display a "rotating" checkered tube on top a greyed gem.
ShaderList      = @
Code            = "
void main()
{
  float a, r, f;
  vec4  vColor, vBW;
  vec3  vCoef = vec3(0.299, 0.587, 0.114);
  vec2  vTL   = vec2(texture_left, texture_top);
  vec2  vBR   = vec2(texture_right, texture_bottom);
  vec2  vPos  = -1.0 + 2.0 * (gl_TexCoord[0].xy - vTL) / (vBR - vTL);

  vColor  = texture2D(texture, gl_TexCoord[0].xy);
  vBW     = vec4(vec3(smoothstep(0.3, 0.6, dot(vColor.rgb * vCoef, vec3(1.0, 1.0, 1.0)))), vColor.a);

  a   = atan(vPos.y, vPos.x);
  a  += sin(r + time);
  r   = sqrt(dot(vPos, vPos));
  f   = sin(20.0 * r + 10.0 * sin(1.5 * time));
  f  *= sin(10.0 * a + 10.0 * sin(time));
  f   = smoothstep(-0.5, 0.5, f);

  gl_FragColor = mix(vColor, vBW, f);}
"
UseCustomParam  = true
ParamList       = texture # time
time            = time

[Music]
SoundList       = @
Music           = gbloop.ogg                              ; A short music loop, composed by Mochi.
Loop            = 1

[Thump]                                                   ; A sound effect by qubodup, found on opengameart.org
Sound           = jumpland.ogg
Pitch           = 0.8 ~ 1.5

[Boink]                                                   ; Another sound effect by qubodup, also found on opengameart.org
Sound           = jump.ogg
Pitch           = 0.9 ~ 1.2


; --- FXs ---

; Here are some FXs whose names are (hopefully) self explanatory.
[ParticleShrinkFX]
Type            = scale
Curve           = linear
StartTime       = 0.25
EndTime         = @Particle.LifeTime
StartValue      = 1
EndValue        = 0.01
